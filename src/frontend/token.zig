const std = @import("std");

pub const Token = union(enum) {
    ident: []const u8,
    number: []const u8,
    symbol: []const u8,
    string: []const u8,
    char: []const u8, // len between 1 and 4

    kw_let,
    kw_const,
    kw_function,
    kw_return,
    kw_if,
    kw_else,
    kw_export,
    kw_type,

    kw_null,
    kw_true,
    kw_false,

    eq,
    plus_eq,
    minus_eq,
    star_eq,
    div_eq,
    mod_eq,
    pow_eq,
    lshift_eq,
    rshift_eq,
    urshift_eq,
    bit_and_eq,
    bit_or_eq,
    bit_xor_eq,
    bit_not_eq,
    and_eq,
    or_eq,
    nullish_eq,
    conditional_eq,

    eqs,
    neq,
    geq,
    leq,
    gt,
    lt,

    plus,
    minus,
    star,
    div,
    mod,
    pow,
    lshift,
    rshift,
    urshift,
    bit_and,
    bit_or,
    bit_xor,
    bit_not,
    and_op,
    or_op,
    nullish,

    dotdotdot,
    question,
    dot,
    comma,
    colon,
    semi_colon,
    lparent,
    rparent,
    lbrace,
    rbrace,
    hash_bracket,
    lbracket,
    rbracket,

    eof,

    const Self = @This();

    pub const keywords = std.ComptimeStringMap(Token, .{
        .{ "let", .kw_let },
        .{ "const", .kw_const },
        .{ "func", .kw_function },
        .{ "return", .kw_return },
        .{ "if", .kw_if },
        .{ "else", .kw_else },
        .{ "export", .kw_export },
        .{ "type", .kw_type },

        .{ "null", .kw_null },
        .{ "true", .kw_true },
        .{ "false", .kw_false },
    });

    pub const operators = std.ComptimeStringMap(Token, .{
        .{ "=", .eq },
        .{ "+=", .plus_eq },
        .{ "-=", .minus_eq },
        .{ "*=", .star_eq },
        .{ "/=", .div_eq },
        .{ "%=", .mod_eq },
        .{ "**=", .pow_eq },
        .{ "<<=", .lshift_eq },
        .{ ">>=", .rshift_eq },
        .{ ">>>=", .urshift_eq },
        .{ "&=", .bit_and_eq },
        .{ "|=", .bit_or_eq },
        .{ "^=", .bit_xor_eq },
        .{ "~=", .bit_not_eq },
        .{ "&&=", .and_eq },
        .{ "||=", .or_eq },
        .{ "??=", .nullish_eq },
        .{ "?=", .conditional_eq },

        .{ "==", .eqs },
        .{ "!=", .neq },
        .{ ">=", .geq },
        .{ "<=", .leq },
        .{ ">", .gt },
        .{ "<", .lt },

        .{ "+", .plus },
        .{ "-", .minus },
        .{ "*", .star },
        .{ "/", .div },
        .{ "%", .mod },
        .{ "**", .pow },
        .{ "<<", .lshift },
        .{ ">>", .rshift },
        .{ ">>>", .urshift },
        .{ "&", .bit_and },
        .{ "|", .bit_or },
        .{ "^", .bit_xor },
        .{ "~", .bit_not },
        .{ "&&", .and_op },
        .{ "||", .or_op },
        .{ "??", .nullish },

        .{ "...", .dotdotdot },
        .{ "?", .question },
        .{ ".", .dot },
        .{ ",", .comma },
        .{ ":", .colon },
        .{ ";", .semi_colon },
        .{ "(", .lparent },
        .{ ")", .rparent },
        .{ "{", .lbrace },
        .{ "}", .rbrace },
        .{ "#[", .hash_bracket },
        .{ "[", .lbracket },
        .{ "]", .rbracket },
    });
};
